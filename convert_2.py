import json
import csv
import os

# --- C·∫§U H√åNH T√äN FILE ---
LEARNING_OBJECTS_JSON_PATH = 'input.json'
QUESTIONS_CSV_PATH = 'questions.csv'
OUTPUT_CSV_PATH = 'questions_mapped.csv' # File ƒë·∫ßu ra s·∫Ω c√≥ t√™n n√†y

def create_id_mapping(json_file_path):
    """
    ƒê·ªçc file JSON c·ªßa Learning Objects v√† t·∫°o m·ªôt dictionary ƒë·ªÉ "d·ªãch"
    t·ª´ custom_lo_id (v√≠ d·ª•: 'LO-C1-01') sang name c·ªßa Frappe (v√≠ d·ª•: 'LO-00001').
    """
    try:
        with open(json_file_path, 'r', encoding='utf-8') as f:
            learning_objects = json.load(f)
        
        id_map = {}
        for lo in learning_objects:
            # Key l√† ID t√πy ch·ªânh, Value l√† ID (name) c·ªßa Frappe
            if 'custom_lo_id' in lo and 'name' in lo:
                id_map[lo['custom_lo_id']] = lo['name']
        
        print(f"‚úÖ ƒê√£ t·∫°o b·∫£n ƒë·ªì chuy·ªÉn ƒë·ªïi cho {len(id_map)} Learning Objects.")
        return id_map
    except FileNotFoundError:
        print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y file '{json_file_path}'. H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ export v√† ƒë·∫∑t file ƒë√∫ng ch·ªó.")
        return None
    except Exception as e:
        print(f"‚ùå L·ªñI: C√≥ l·ªói khi ƒë·ªçc file JSON: {e}")
        return None

def map_csv_data(id_map, input_csv_path, output_csv_path):
    """
    ƒê·ªçc file questions.csv, thay th·∫ø c·ªôt learning_object b·∫±ng ID ƒë√∫ng,
    v√† ghi ra m·ªôt file CSV m·ªõi.
    """
    try:
        with open(input_csv_path, 'r', encoding='utf-8') as infile, \
             open(output_csv_path, 'w', encoding='utf-8', newline='') as outfile:
            
            reader = csv.reader(infile)
            writer = csv.writer(outfile)

            # ƒê·ªçc v√† ghi l·∫°i d√≤ng ti√™u ƒë·ªÅ (header)
            header = next(reader)
            writer.writerow(header)
            
            processed_count = 0
            error_count = 0
            
            # L·∫∑p qua t·ª´ng d√≤ng trong file c√¢u h·ªèi
            for row in reader:
                if not row: continue # B·ªè qua d√≤ng tr·ªëng

                custom_id = row[0] # L·∫•y ID t√πy ch·ªânh t·ª´ c·ªôt ƒë·∫ßu ti√™n
                
                # "D·ªãch" ID t√πy ch·ªânh sang ID c·ªßa Frappe
                frappe_id = id_map.get(custom_id)
                
                if frappe_id:
                    # N·∫øu t√¨m th·∫•y, thay th·∫ø gi√° tr·ªã trong c·ªôt ƒë·∫ßu ti√™n
                    row[0] = frappe_id
                    writer.writerow(row)
                    processed_count += 1
                else:
                    # N·∫øu kh√¥ng t√¨m th·∫•y, b√°o l·ªói v√† b·ªè qua d√≤ng n√†y
                    print(f"‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y ID c·ªßa Frappe cho '{custom_id}'. B·ªè qua d√≤ng n√†y.")
                    error_count += 1
            
            print(f"\n‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {processed_count} c√¢u h·ªèi.")
            if error_count > 0:
                print(f"‚ö†Ô∏è C√≥ {error_count} d√≤ng b·ªã b·ªè qua do kh√¥ng t√¨m th·∫•y ID t∆∞∆°ng ·ª©ng.")
            print(f"üëç File m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i: '{output_csv_path}'")

    except FileNotFoundError:
        print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y file '{input_csv_path}'.")
    except Exception as e:
        print(f"‚ùå L·ªñI: C√≥ l·ªói khi x·ª≠ l√Ω file CSV: {e}")

# --- H√ÄM CH√çNH ƒê·ªÇ CH·∫†Y SCRIPT ---
if __name__ == "__main__":
    print("--- B·∫Øt ƒë·∫ßu qu√° tr√¨nh chuy·ªÉn ƒë·ªïi ID cho file c√¢u h·ªèi ---")
    
    # Ki·ªÉm tra xem c√°c file c·∫ßn thi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(LEARNING_OBJECTS_JSON_PATH) or not os.path.exists(QUESTIONS_CSV_PATH):
        print("\n**Vui l√≤ng ƒë·∫£m b·∫£o 2 file sau c√≥ trong c√πng th∆∞ m·ª•c v·ªõi script:**")
        print(f"1. {LEARNING_OBJECTS_JSON_PATH} (Export t·ª´ Learning Object List)")
        print(f"2. {QUESTIONS_CSV_PATH} (File ch·ª©a ng√¢n h√†ng c√¢u h·ªèi c·ªßa b·∫°n)")
    else:
        # B∆∞·ªõc 1: T·∫°o b·∫£n ƒë·ªì ID
        mapping_dict = create_id_mapping(LEARNING_OBJECTS_JSON_PATH)
        
        # B∆∞·ªõc 2: N·∫øu t·∫°o b·∫£n ƒë·ªì th√†nh c√¥ng, x·ª≠ l√Ω file CSV
        if mapping_dict:
            map_csv_data(mapping_dict, QUESTIONS_CSV_PATH, OUTPUT_CSV_PATH)